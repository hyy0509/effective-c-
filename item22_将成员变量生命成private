一、 为什么成员变量不该是public
1. 语法的一致性
访问或调用类的成员函数时需要加小括号（圆括号），为了语法的一致性，把成员变量封装到private中，通过getter()/setter()调用，保持了语法的一致性。
2. 有助于细微划分访问控制，可以让你对成员变量的处理有更精确的控制
例如只读，读写，只写操作，便于更加精确灵活的控制。
3. 封装的重要性
将成员变量隐藏在函数借口的背后，得以替换不同的实现方式，可以为“所有可能的实现”提供弹性，确保class的约束条件总是会获得维护，即保留了日后变更实现的权利。
二、 从封装的角度，只有两种访问权限: 提供封装(private)和不提供封装(public,protected)
从控制访问权限的角度，若public和protected改动，将会有大量的不可预知的与其相关的代码随之收到破坏。
protected并不比public更具封装性
三、某些东西的封装性与“当其内容改变时可能造成的代码破坏量”成反比
